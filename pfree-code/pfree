#!/usr/bin/env python3

import time, argparse, subprocess, os

Description = """
Reed College Undergraduate Thesis Project by Ryan Quisenberry
This project as an implementation of the method of Prefix-Free Parsing
for building a Burrow's Wheeler Transform as described in: 

   "Prefix-Free Parsing for Building Big BWTs"
   by Christina Boucher, Travis Gagie, Alan Kuhnle and Giovanni Manzini
   Proc. WABI '18 (http://drops.dagstuhl.de/opus/volltexte/2018/9304/)
   
In its current stage the code is heavily derived directly from the Big
BWT github, here: (https://gitlab.com/manzai/Big-BWT). All changes and 
work on this code are entirely for academic pruposes.
"""

# absolute path of auxiliary executables

dirname = os.path.dirname(os.path.abspath(__file__))
parse_exe = os.path.join(dirname, "bin/parse")
mt_parse_exe = os.path.join(dirname, "bin/mt_parse")
log_dir = os.path.join(dirname, "logs/")
output_dir = os.path.join(dirname, "output/")


def main():
    parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('input', help='input file name', type=str)
    parser.add_argument('-k', help='keep temporary files', action='store_true')
    parser.add_argument('-w', '--wsize', help='sliding window size (def. 6)', default=6, type=int)
    parser.add_argument('-p', '--mod', help='hash modulus (def. 20)', default=20, type=int)
    parser.add_argument('-v', help='verbose',action='store_true')
    parser.add_argument('-t', help='number of threads (def. 1)',default=1, type=int)
    # parser.add_argument('--checks', help='additional correctness checking',action='store_true')
    parser.add_argument('--parsing',  help='stop after the parsing phase (debug only)',action='store_true')
    args = parser.parse_args()
        
    file_name = os.path.basename(args.input)
    logfile_name = log_dir + file_name + ".log"
    print("Sending logging messages to file:", logfile_name)
    
    with open(logfile_name,"a") as logfile:  
        # ---------- parsing of the input file 
        start0 = start = time.time()
        if args.t == 1:
            command = "{exe} {input} {output} -w {wsize} -p {modulus}".format(exe = parse_exe, 
                                                                        wsize=args.wsize, 
                                                                        modulus = args.mod, 
                                                                        input=args.input, 
                                                                        output=output_dir + file_name)
        elif args.t > 1:
            command = "{exe} {input} {output} -w {wsize} -p {modulus} -t {threads}".format(exe = mt_parse_exe, 
                                                                                        wsize=args.wsize, 
                                                                                        modulus = args.mod, 
                                                                                        input=args.input, 
                                                                                        output=output_dir + file_name,
                                                                                        threads=args.t)
        else:
            print("invalid number of threads, must be 1 or more")
            return   
        # if args.v: 
        #  command += " -v"
        print("==== Parsing. Command:", command)
        if (execute_command(command,logfile,logfile_name) != True):
            return
        print("Elapsed time: {0:.4f}".format(time.time()-start))

        if args.parsing:
            # delete temporary parsing files 
            # command = "rm -f {file}.parse_old {file}.last {file}.occ".format(file=args.input)
            # if(execute_command(command,logfile,logfile_name)!=True):
            #   return
            print("==== Stopping after the parsing phase as requested")      
            return

        # ----------- computation of the BWT of the parsing
        # start = time.time()
        # parse_size = os.path.getsize(args.input+".parse")/4
        # if(parse_size >=  (2**32-1) ):
        #   print("Sorry, the parse contains %d words" %  parse_size )
        #   print("which is more than my current limit 2^32-2")
        #   print("Please re-run the program with a larger modulus (currently %d)" % args.mod)
        #   sys.exit(1)  
        # elif(parse_size >=  (2**31-1) ):
        #   command = "{exe} {file}".format(exe = parsebwt_exe64, file=args.input)
        # else:
        #   command = "{exe} {file}".format(exe = parsebwt_exe, file=args.input)
        # if (args.s or args.e or args.S): command += " -s"
        # if (args.t>0): command += " -t " + str(args.t)
        # print("==== Computing BWT of parsing. Command:", command)
        # if(execute_command(command,logfile,logfile_name)!=True):
        #   return
        # print("Elapsed time: {0:.4f}".format(time.time()-start));      
        
        # ----------- compute final BWT using dictionary and BWT of parse    
        # start = time.time()     
        # if(os.path.getsize(args.input+".dict") >=  (2**31-4) ):
        # 64 bit version with and without threads
        #   if args.t>0 and args.s==False and args.e==False:
        #     command = "{exe} -w {wsize} {file} -t {th}".format(
        #             exe = pfbwt_exe64, wsize=args.wsize, file=args.input, th=args.t)
        #   else:
        #     command = "{exe} -w {wsize} {file}".format( 
        #             exe = pfbwtNT_exe64, wsize=args.wsize, file=args.input)        
        # else:  # 32 bit version
        #   if args.t>0 and args.s==False and args.e==False:
        #     command = "{exe} -w {wsize} {file} -t {th}".format(exe = pfbwt_exe,
        #             wsize=args.wsize, file=args.input, th=args.t)
        #   else:
        #     command = "{exe} -w {wsize} {file}".format(exe = pfbwtNT_exe,
        #             wsize=args.wsize, file=args.input)
        # if args.s: command += " -s"
        # if args.e: command += " -e"
        # if args.S: command += " -S"
        
        # print("==== Computing final BWT. Command:", command)
        # if(execute_command(command,logfile,logfile_name)!=True):
        #   return
        # print("Elapsed time: {0:.4f}".format(time.time()-start))      
        print("Total construction time: {0:.4f}".format(time.time()-start0))      

        # ---- compute sha256sum
        # if args.sum:
        #   digest = file_digest(args.input +".bwt",logfile)
        #   print("BWT {exe}: {digest}".format(exe=shasum_exe, digest=digest))
        #   if args.S:
        #     digest = file_digest(args.input +".sa",logfile)
        #     print("SA  {exe}: {digest}".format(exe=shasum_exe, digest=digest))
        #   if args.s:
        #     digest = file_digest(args.input +".ssa",logfile)
        #     print("SSA {exe}: {digest}".format(exe=shasum_exe, digest=digest))
        #   if args.e:
        #     digest = file_digest(args.input +".esa",logfile)
        #     print("ESA {exe}: {digest}".format(exe=shasum_exe, digest=digest))
    
        # ---- delete intermediate files
        if args.k == False:
            print("==== Deleting temporary files.") # no need to show the command
            command = "rm {output}.parse_old*".format(output=output_dir + file_name)
            os.system(command)

    print("==== Done")

# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,logfile_name,env=None):
    try:
        #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
        subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
    except subprocess.CalledProcessError:
        print("Error executing command line:")
        print("\t"+ command)
        print("Check log file: " + logfile_name)
        return False
    return True

if __name__ == '__main__':
    main()
